#.github/workflows/deploy.yml
# This is a single, unified workflow to conditionally build the PDF and deploy the Pelican site.

name: Build and Deploy Site

on:
  # Runs on pushes to the main branch.
  push:
    branches: [ "main" ]
  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages.
# This is the modern, secure way to set permissions.
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job: prepares the site and PDF.
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository's code.
      # fetch-depth: 0 is required for the file change detection to work correctly.
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Check if the cv.yml file has changed in the latest push.
      - name: Get changed files
        id: changed_files
        uses: tj-actions/changed-files@v44
        with:
          files: content/data/cv.yml

      # Step 3: Generate the PDF, but ONLY if the cv.yml file has changed.
      # This entire block is skipped if the condition is false, saving build time.
      - name: Generate PDF from CV if changed
        if: steps.changed_files.outputs.any_changed == 'true'
        run: |
          echo "CV.yml changed. Generating new PDF..."
          # 1. Create directories for intermediate and final files.
          mkdir -p.build output/pdf

          # 2. Convert YAML to a temporary JSON file using a lightweight Docker image.
          docker run --rm -v ${{ github.workspace }}:/workdir mikefarah/yq '.' workdir/content/data/cv.yml >.build/resume.json

          # 3. Setup Node.js environment for the PDF generation tool.
          # This is a self-contained step and doesn't affect the Python steps later.
          npm install @rbardini/resumed jsonresume-theme-class

          # 4. Export the resume to the final PDF path.
          npx resumed export output/pdf/CV.pdf --theme class --input.build/resume.json
      
      - name: Report PDF generation status
        if: steps.changed_files.outputs.any_changed!= 'true'
        run: echo "CV.yml not changed. Skipping PDF generation."

      # Step 4: Set up the Python environment for the Pelican build.
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      # Step 5: Install Python dependencies from your requirements.txt file.
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      # Step 6: Build the website using Pelican's production configuration.
      # This command is taken directly from the theme's recommended workflow.
      - name: Build site with Pelican
        run: |
          python -m pelican -s publishconf.py
          rm -rf output/theme/.webassets-cache

      # Step 7: Fix any potential file permission issues.
      - name: Fix permissions
        run: |
          chmod -c -R +rX "output/" | while read line; do
            echo "::warning title=Invalid file permissions automatically fixed::$line"
          done

      # Step 8: Upload the entire 'output' directory as a special artifact for deployment.
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './output'

  # Deploy job: takes the artifact from the build job and deploys it.
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4